

/** Implements the snake. */
class Snake {

   field int x, y; // screen location of the snake
   field int size; // length of this snake, in pixels
   field int length; // current length of snake
   field int maxLength; // maxLength
   field Array theSnake; // the snake is always maxLength but only length is black
   field int currentDirection; // last input from user
   field boolean alive;
  

   /** Constructs a new snake with a given location and size. */
   constructor Snake new(int Ax, int Ay, int Alength) {
      var int i;
      var int startLength;
      let i = 0;
      let startLength = 200;
      let maxLength = 2000; 
      let x = Ax;
      let y = Ay;
     
      let length = Alength;
      let currentDirection = 4; // otherwise can we go into our self
      let alive = true; 
      let theSnake = Array.new(maxLength); //Alength is 20
   
      
       // creates the snake its a full snake from beginning
      while(i < maxLength){  
            let theSnake[i] = x - (i/2); // x-coordinat
       
            let theSnake[i+1] = y; // y-coordinate
            let i = i+2;
            //do Screen.drawCircle(theSnake[i],theSnake[i+1],3);
      }
      //first draw that draws part of snake
      do draw();
      return this;
   }

   /** Disposes this snake. */
   method void dispose() {
      do Memory.deAlloc(this);
      return;
   }

   /** Draws the snake on the screen. */
   method void draw() {
      var int i;
      let i = 0; 
      do Screen.setColor(true);
      while(i < length){
          do Screen.drawCircle(theSnake[i],theSnake[i+1],3);
          let i = i+2;
          // should crate custom head (and maybe tail)
      }
     
      return;
   }
    // when snake dies it needs to be resurected
    method void initSnake (int Ax, int Ay) {
      var int i;
      let i = 0;
      let x = Ax;
      let y = Ay;
      let currentDirection = 4;
      let length = 200;
    
      while(i < maxLength){  
       let theSnake[i] = x - (i/2); // x-coordinat
       let theSnake[i+1] = y; // y-coordinate
       let i = i+2;
       }
     
      return;
   }

   /** Erases the snake from the screen. */
   method void erase() {
      var int i;
      let i = 0; 
      do Screen.setColor(false);
      while(i < length){
          do Screen.drawCircle(theSnake[i],theSnake[i+1],3);
          let i = i+2;
          // should crate custom head (and maybe tail)
      }
     
      return;
   }



   /** Moves the snake up by 1 pixels. */
   method void moveUp() {
       if (y > 1) {
         do Screen.setColor(false);
         // erase tail
         do Screen.drawCircle(theSnake[ length-2 ], theSnake[ length - 1 ], 3);
         let y = y - 1;
         //print head
         do Screen.setColor(true);
         do Screen.drawCircle(x, y, 3);
      }
      return;
   }

   /** Moves the snake down by 1 pixels. */
   method void moveDown() {
      if (y < 254) {
           do Screen.setColor(false);
         // erase tail
         do Screen.drawCircle(theSnake[ length ], theSnake[ length + 1 ], 3);
         let y = y + 1;
         //print head
         do Screen.setColor(true);
         do Screen.drawCircle(x, y, 3);
      }
      return;
   }

   /** Moves the snake left by 1 pixels. */
   method void moveLeft() {
      if (x > 1) {
           do Screen.setColor(false);
         // erase tail
         do Screen.drawCircle(theSnake[ length ], theSnake[ length + 1 ], 3);
         let x = x - 1;
         //print head
         do Screen.setColor(true);
         do Screen.drawCircle(x, y, 3);
      }
      return;
   }

   /** Moves the snake right by 1 pixels. */
   
   method void moveRight() {
      if (x < 510) {
          do Screen.setColor(false);
         // erase tail
         do Screen.drawCircle(theSnake[ length ], theSnake[ length + 1 ], 3);
         let x = x + 1;
         //print head
         do Screen.setColor(true);
         do Screen.drawCircle(x, y, 3);
      }
      return;
   }
    // everytime the snake moves its coordinates gets updated.
    // a smarter way to do it is needed
    method void updateSnake() {
        var int i;
        let i = maxLength-2;
        
         do Screen.setColor(false);
         // erase tail
         do Screen.drawCircle(theSnake[ length ], theSnake[ length + 1 ], 3);
         do wallDeath(); // hit the wall
        
        // do i need to move every item?
        // cant i just update 2 pointer or something?
        while(i > 0){
            
            let theSnake[i] = theSnake[i-2]; // move xcord 2 steps back
            let theSnake[i+1] = theSnake[i-1]; // move ycord 2 steps back
            
            if( (theSnake[i] = x) & theSnake[i+1] = y & ~(currentDirection = 0) & (i < (length+1) )){
                // (i < (length+1) makes that only black part is triggering the death
                let alive = false;
            }
            // also booms empty tail
            // works in 2 directions but if i press down (when going up) and press right (when going left)
            // it triggers
   
            let i = i-2;
        }
        
        // new coordinates of head
        let theSnake[0] = x;
        let theSnake[1] = y;
        
        return;
    }
    
    // death by hitting the wall
    method void wallDeath(){
        
        // I needed to check some pixles from the edges so we 
        // circle dont get drawn outside of Screen (causing the program to fail)
        if(x = 99 | x = 100){
           // do Output.printString("wallDeath");
            let alive = false;
        }
        if(x=505 | x=504){
            //do Output.printString("wallDeath");
            let alive = false;
        }
        
        if(y=5 | y=4){
            //do Output.printString("wallDeath");
            let alive = false;
        }
        if(y=247 | y=248){
            //do Output.printString("wallDeath");
            let alive = false;
        }
        
        return;
    }
    
    
    // just some getters and setters.
    method boolean getAlive(){
        return alive;
    }
    method void setAlive( boolean status){
        let alive = status;
        return;
    }
    
    method void setCurrDir(int newCurrDir){
        let currentDirection = newCurrDir;
        return;
    }
    
    method int getCurrDir(){
        return currentDirection;
    }
    
    method int getXcord (){
        return x;
    }
    method int getYcord(){
        return y;
    }
    
    
    method void setLength( int newLength){
        let length = newLength;
        return;
    }
    
    method int getLength(){
        
        return length;
    }
    
    method int getMaxLength(){
        return maxLength;
    }
}
