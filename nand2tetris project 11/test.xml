<class>
	<keyword> class </keyword> 
	<identifier> SnakeGame </identifier> 
	<symbol> { </symbol> 
	<classVarDec>
		<keyword> field </keyword> 
		<identifier> Snake </identifier> 
		<identifier> snake </identifier> 
		<symbol> ; </symbol> 
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword> 
		<keyword> int </keyword> 
		<identifier> direction </identifier> 
		<symbol> ; </symbol> 
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword> 
		<keyword> int </keyword> 
		<identifier> lives </identifier> 
		<symbol> ; </symbol> 
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword> 
		<keyword> int </keyword> 
		<identifier> score </identifier> 
		<symbol> ; </symbol> 
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword> 
		<keyword> int </keyword> 
		<identifier> highScore </identifier> 
		<symbol> ; </symbol> 
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword> 
		<keyword> boolean </keyword> 
		<identifier> exit </identifier> 
		<symbol> ; </symbol> 
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword> 
		<keyword> int </keyword> 
		<identifier> xApple </identifier> 
		<symbol> ; </symbol> 
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword> 
		<keyword> int </keyword> 
		<identifier> yApple </identifier> 
		<symbol> ; </symbol> 
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword> 
		<keyword> int </keyword> 
		<identifier> appleCounter </identifier> 
		<symbol> ; </symbol> 
	</classVarDec>
	<subroutineDec>
		<keyword> constructor </keyword> 
		<identifier> SnakeGame </identifier> 
		<identifier> new </identifier> 
		<symbol> ( </symbol> 
		<parameterList>
		</parameterList>
		<symbol> ) </symbol> 
		<subroutineBody>
			<symbol> { </symbol> 
			<statements>
				<letStatement>
					<keyword> let </keyword> 
					<identifier> snake </identifier> 
					<symbol> = </symbol> 
					<expression>
						<term>
							<identifier> Snake </identifier> 
							<symbol> . </symbol> 
							<identifier> new </identifier> 
							<symbol> ( </symbol> 
							<expressionList>
								<expression>
									<term>
										<integerConstant> 300 </integerConstant> 
									</term>
								</expression>
								<symbol> , </symbol> 
								<expression>
									<term>
										<integerConstant> 126 </integerConstant> 
									</term>
								</expression>
								<symbol> , </symbol> 
								<expression>
									<term>
										<integerConstant> 200 </integerConstant> 
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol> 
						</term>
					</expression>
					<symbol> ; </symbol> 
				</letStatement>
				<letStatement>
					<keyword> let </keyword> 
					<identifier> direction </identifier> 
					<symbol> = </symbol> 
					<expression>
						<term>
							<integerConstant> 0 </integerConstant> 
						</term>
					</expression>
					<symbol> ; </symbol> 
				</letStatement>
				<letStatement>
					<keyword> let </keyword> 
					<identifier> lives </identifier> 
					<symbol> = </symbol> 
					<expression>
						<term>
							<integerConstant> 3 </integerConstant> 
						</term>
					</expression>
					<symbol> ; </symbol> 
				</letStatement>
				<letStatement>
					<keyword> let </keyword> 
					<identifier> score </identifier> 
					<symbol> = </symbol> 
					<expression>
						<term>
							<integerConstant> 0 </integerConstant> 
						</term>
					</expression>
					<symbol> ; </symbol> 
				</letStatement>
				<letStatement>
					<keyword> let </keyword> 
					<identifier> highScore </identifier> 
					<symbol> = </symbol> 
					<expression>
						<term>
							<integerConstant> 0 </integerConstant> 
						</term>
					</expression>
					<symbol> ; </symbol> 
				</letStatement>
				<letStatement>
					<keyword> let </keyword> 
					<identifier> exit </identifier> 
					<symbol> = </symbol> 
					<expression>
						<term>
							<keyword> false </keyword> 
						</term>
					</expression>
					<symbol> ; </symbol> 
				</letStatement>
				<letStatement>
					<keyword> let </keyword> 
					<identifier> appleCounter </identifier> 
					<symbol> = </symbol> 
					<expression>
						<term>
							<integerConstant> 0 </integerConstant> 
						</term>
					</expression>
					<symbol> ; </symbol> 
				</letStatement>
				<doStatement>
					<keyword> do </keyword> 
					<identifier> apple </identifier> 
					<symbol> ( </symbol> 
					<expressionList>
					</expressionList>
					<symbol> ) </symbol> 
					<symbol> ; </symbol> 
				</doStatement>
				<returnStatement>
					<keyword> return </keyword> 
					<expression>
						<term>
							<keyword> this </keyword> 
						</term>
					</expression>
					<symbol> ; </symbol> 
				</returnStatement>
			</statements>
			<symbol> } </symbol> 
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword> 
		<keyword> void </keyword> 
		<identifier> dispose </identifier> 
		<symbol> ( </symbol> 
		<parameterList>
		</parameterList>
		<symbol> ) </symbol> 
		<subroutineBody>
			<symbol> { </symbol> 
			<statements>
				<doStatement>
					<keyword> do </keyword> 
					<identifier> snake </identifier> 
					<symbol> . </symbol> 
					<identifier> dispose </identifier> 
					<symbol> ( </symbol> 
					<expressionList>
					</expressionList>
					<symbol> ) </symbol> 
					<symbol> ; </symbol> 
				</doStatement>
				<doStatement>
					<keyword> do </keyword> 
					<identifier> Memory </identifier> 
					<symbol> . </symbol> 
					<identifier> deAlloc </identifier> 
					<symbol> ( </symbol> 
					<expressionList>
						<expression>
							<term>
								<keyword> this </keyword> 
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol> 
					<symbol> ; </symbol> 
				</doStatement>
				<returnStatement>
					<keyword> return </keyword> 
					<symbol> ; </symbol> 
				</returnStatement>
			</statements>
			<symbol> } </symbol> 
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword> 
		<keyword> void </keyword> 
		<identifier> moveSnake </identifier> 
		<symbol> ( </symbol> 
		<parameterList>
		</parameterList>
		<symbol> ) </symbol> 
		<subroutineBody>
			<symbol> { </symbol> 
			<varDec>
				<keyword> var </keyword> 
				<keyword> int </keyword> 
				<identifier> currDir </identifier> 
				<symbol> ; </symbol> 
			</varDec>
			<varDec>
				<keyword> var </keyword> 
				<keyword> boolean </keyword> 
				<identifier> boolAlive </identifier> 
				<symbol> ; </symbol> 
			</varDec>
			<varDec>
				<keyword> var </keyword> 
				<keyword> int </keyword> 
				<identifier> distance </identifier> 
				<symbol> ; </symbol> 
			</varDec>
			<varDec>
				<keyword> var </keyword> 
				<keyword> int </keyword> 
				<identifier> snakeLength </identifier> 
				<symbol> ; </symbol> 
			</varDec>
			<statements>
				<letStatement>
					<keyword> let </keyword> 
					<identifier> distance </identifier> 
					<symbol> = </symbol> 
					<expression>
						<term>
							<identifier> dist </identifier> 
							<symbol> ( </symbol> 
							<expressionList>
								<expression>
									<term>
										<identifier> snake </identifier> 
										<symbol> . </symbol> 
										<identifier> getXcord </identifier> 
										<symbol> ( </symbol> 
										<expressionList>
										</expressionList>
										<symbol> ) </symbol> 
									</term>
								</expression>
								<symbol> , </symbol> 
								<expression>
									<term>
										<identifier> snake </identifier> 
										<symbol> . </symbol> 
										<identifier> getYcord </identifier> 
										<symbol> ( </symbol> 
										<expressionList>
										</expressionList>
										<symbol> ) </symbol> 
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol> 
						</term>
					</expression>
					<symbol> ; </symbol> 
				</letStatement>
				<letStatement>
					<keyword> let </keyword> 
					<identifier> currDir </identifier> 
					<symbol> = </symbol> 
					<expression>
						<term>
							<identifier> snake </identifier> 
							<symbol> . </symbol> 
							<identifier> getCurrDir </identifier> 
							<symbol> ( </symbol> 
							<expressionList>
							</expressionList>
							<symbol> ) </symbol> 
						</term>
					</expression>
					<symbol> ; </symbol> 
				</letStatement>
				<ifStatement>
					<keyword> if </keyword> 
					<symbol> ( </symbol> 
					<expression>
						<term>
							<identifier> distance </identifier> 
						</term>
						<symbol> &lt; </symbol> 
						<term>
							<integerConstant> 5 </integerConstant> 
						</term>
					</expression>
					<symbol> ) </symbol> 
					<symbol> { </symbol> 
					<statements>
						<doStatement>
							<keyword> do </keyword> 
							<identifier> pointsApple </identifier> 
							<symbol> ( </symbol> 
							<expressionList>
							</expressionList>
							<symbol> ) </symbol> 
							<symbol> ; </symbol> 
						</doStatement>
					</statements>
					<symbol> } </symbol> 
				</ifStatement>
				<letStatement>
					<keyword> let </keyword> 
					<identifier> boolAlive </identifier> 
					<symbol> = </symbol> 
					<expression>
						<term>
							<identifier> snake </identifier> 
							<symbol> . </symbol> 
							<identifier> getAlive </identifier> 
							<symbol> ( </symbol> 
							<expressionList>
							</expressionList>
							<symbol> ) </symbol> 
						</term>
					</expression>
					<symbol> ; </symbol> 
				</letStatement>
				<ifStatement>
					<keyword> if </keyword> 
					<symbol> ( </symbol> 
					<expression>
						<term>
							<symbol> ~ </symbol> 
							<term>
								<identifier> boolAlive </identifier> 
							</term>
						</term>
					</expression>
					<symbol> ) </symbol> 
					<symbol> { </symbol> 
					<statements>
						<doStatement>
							<keyword> do </keyword> 
							<identifier> Output </identifier> 
							<symbol> . </symbol> 
							<identifier> printString </identifier> 
							<symbol> ( </symbol> 
							<expressionList>
								<expression>
									<term>
										<stringConstant> SuperDeath </stringConstant> 
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol> 
							<symbol> ; </symbol> 
						</doStatement>
						<doStatement>
							<keyword> do </keyword> 
							<identifier> death </identifier> 
							<symbol> ( </symbol> 
							<expressionList>
							</expressionList>
							<symbol> ) </symbol> 
							<symbol> ; </symbol> 
						</doStatement>
					</statements>
					<symbol> } </symbol> 
				</ifStatement>
				<ifStatement>
					<keyword> if </keyword> 
					<symbol> ( </symbol> 
					<expression>
						<term>
							<symbol> ( </symbol> 
							<expression>
								<term>
									<identifier> direction </identifier> 
								</term>
								<symbol> = </symbol> 
								<term>
									<integerConstant> 1 </integerConstant> 
								</term>
							</expression>
							<symbol> ) </symbol> 
						</term>
						<symbol> &amp; </symbol> 
						<term>
							<symbol> ~ </symbol> 
							<term>
								<symbol> ( </symbol> 
								<expression>
									<term>
										<identifier> currDir </identifier> 
									</term>
									<symbol> = </symbol> 
									<term>
										<integerConstant> 2 </integerConstant> 
									</term>
								</expression>
								<symbol> ) </symbol> 
							</term>
						</term>
					</expression>
					<symbol> ) </symbol> 
					<symbol> { </symbol> 
					<statements>
						<doStatement>
							<keyword> do </keyword> 
							<identifier> snake </identifier> 
							<symbol> . </symbol> 
							<identifier> moveUp </identifier> 
							<symbol> ( </symbol> 
							<expressionList>
							</expressionList>
							<symbol> ) </symbol> 
							<symbol> ; </symbol> 
						</doStatement>
						<doStatement>
							<keyword> do </keyword> 
							<identifier> snake </identifier> 
							<symbol> . </symbol> 
							<identifier> updateSnake </identifier> 
							<symbol> ( </symbol> 
							<expressionList>
							</expressionList>
							<symbol> ) </symbol> 
							<symbol> ; </symbol> 
						</doStatement>
						<doStatement>
							<keyword> do </keyword> 
							<identifier> snake </identifier> 
							<symbol> . </symbol> 
							<identifier> setCurrDir </identifier> 
							<symbol> ( </symbol> 
							<expressionList>
								<expression>
									<term>
										<integerConstant> 1 </integerConstant> 
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol> 
							<symbol> ; </symbol> 
						</doStatement>
					</statements>
					<symbol> } </symbol> 
				</ifStatement>
				<ifStatement>
					<keyword> if </keyword> 
					<symbol> ( </symbol> 
					<expression>
						<term>
							<symbol> ( </symbol> 
							<expression>
								<term>
									<identifier> direction </identifier> 
								</term>
								<symbol> = </symbol> 
								<term>
									<integerConstant> 1 </integerConstant> 
								</term>
							</expression>
							<symbol> ) </symbol> 
						</term>
						<symbol> &amp; </symbol> 
						<term>
							<symbol> ( </symbol> 
							<expression>
								<term>
									<identifier> currDir </identifier> 
								</term>
								<symbol> = </symbol> 
								<term>
									<integerConstant> 2 </integerConstant> 
								</term>
							</expression>
							<symbol> ) </symbol> 
						</term>
					</expression>
					<symbol> ) </symbol> 
					<symbol> { </symbol> 
					<statements>
						<letStatement>
							<keyword> let </keyword> 
							<identifier> direction </identifier> 
							<symbol> = </symbol> 
							<expression>
								<term>
									<identifier> currDir </identifier> 
								</term>
							</expression>
							<symbol> ; </symbol> 
						</letStatement>
					</statements>
					<symbol> } </symbol> 
				</ifStatement>
				<ifStatement>
					<keyword> if </keyword> 
					<symbol> ( </symbol> 
					<expression>
						<term>
							<symbol> ( </symbol> 
							<expression>
								<term>
									<identifier> direction </identifier> 
								</term>
							</expression>
							<symbol> ) </symbol> 
						</term>
						<symbol> = </symbol> 
						<term>
							<integerConstant> 2 </integerConstant> 
						</term>
						<symbol> &amp; </symbol> 
						<term>
							<symbol> ~ </symbol> 
							<term>
								<symbol> ( </symbol> 
								<expression>
									<term>
										<identifier> currDir </identifier> 
									</term>
									<symbol> = </symbol> 
									<term>
										<integerConstant> 1 </integerConstant> 
									</term>
								</expression>
								<symbol> ) </symbol> 
							</term>
						</term>
					</expression>
					<symbol> ) </symbol> 
					<symbol> { </symbol> 
					<statements>
						<doStatement>
							<keyword> do </keyword> 
							<identifier> snake </identifier> 
							<symbol> . </symbol> 
							<identifier> moveDown </identifier> 
							<symbol> ( </symbol> 
							<expressionList>
							</expressionList>
							<symbol> ) </symbol> 
							<symbol> ; </symbol> 
						</doStatement>
						<doStatement>
							<keyword> do </keyword> 
							<identifier> snake </identifier> 
							<symbol> . </symbol> 
							<identifier> updateSnake </identifier> 
							<symbol> ( </symbol> 
							<expressionList>
							</expressionList>
							<symbol> ) </symbol> 
							<symbol> ; </symbol> 
						</doStatement>
						<doStatement>
							<keyword> do </keyword> 
							<identifier> snake </identifier> 
							<symbol> . </symbol> 
							<identifier> setCurrDir </identifier> 
							<symbol> ( </symbol> 
							<expressionList>
								<expression>
									<term>
										<integerConstant> 2 </integerConstant> 
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol> 
							<symbol> ; </symbol> 
						</doStatement>
					</statements>
					<symbol> } </symbol> 
				</ifStatement>
				<ifStatement>
					<keyword> if </keyword> 
					<symbol> ( </symbol> 
					<expression>
						<term>
							<symbol> ( </symbol> 
							<expression>
								<term>
									<identifier> direction </identifier> 
								</term>
								<symbol> = </symbol> 
								<term>
									<integerConstant> 2 </integerConstant> 
								</term>
							</expression>
							<symbol> ) </symbol> 
						</term>
						<symbol> &amp; </symbol> 
						<term>
							<symbol> ( </symbol> 
							<expression>
								<term>
									<identifier> currDir </identifier> 
								</term>
								<symbol> = </symbol> 
								<term>
									<integerConstant> 1 </integerConstant> 
								</term>
							</expression>
							<symbol> ) </symbol> 
						</term>
					</expression>
					<symbol> ) </symbol> 
					<symbol> { </symbol> 
					<statements>
						<letStatement>
							<keyword> let </keyword> 
							<identifier> direction </identifier> 
							<symbol> = </symbol> 
							<expression>
								<term>
									<identifier> currDir </identifier> 
								</term>
							</expression>
							<symbol> ; </symbol> 
						</letStatement>
					</statements>
					<symbol> } </symbol> 
				</ifStatement>
				<ifStatement>
					<keyword> if </keyword> 
					<symbol> ( </symbol> 
					<expression>
						<term>
							<identifier> direction </identifier> 
						</term>
						<symbol> = </symbol> 
						<term>
							<integerConstant> 3 </integerConstant> 
						</term>
						<symbol> &amp; </symbol> 
						<term>
							<symbol> ~ </symbol> 
							<term>
								<symbol> ( </symbol> 
								<expression>
									<term>
										<identifier> currDir </identifier> 
									</term>
									<symbol> = </symbol> 
									<term>
										<integerConstant> 4 </integerConstant> 
									</term>
								</expression>
								<symbol> ) </symbol> 
							</term>
						</term>
					</expression>
					<symbol> ) </symbol> 
					<symbol> { </symbol> 
					<statements>
						<doStatement>
							<keyword> do </keyword> 
							<identifier> snake </identifier> 
							<symbol> . </symbol> 
							<identifier> moveLeft </identifier> 
							<symbol> ( </symbol> 
							<expressionList>
							</expressionList>
							<symbol> ) </symbol> 
							<symbol> ; </symbol> 
						</doStatement>
						<doStatement>
							<keyword> do </keyword> 
							<identifier> snake </identifier> 
							<symbol> . </symbol> 
							<identifier> updateSnake </identifier> 
							<symbol> ( </symbol> 
							<expressionList>
							</expressionList>
							<symbol> ) </symbol> 
							<symbol> ; </symbol> 
						</doStatement>
						<doStatement>
							<keyword> do </keyword> 
							<identifier> snake </identifier> 
							<symbol> . </symbol> 
							<identifier> setCurrDir </identifier> 
							<symbol> ( </symbol> 
							<expressionList>
								<expression>
									<term>
										<integerConstant> 3 </integerConstant> 
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol> 
							<symbol> ; </symbol> 
						</doStatement>
					</statements>
					<symbol> } </symbol> 
				</ifStatement>
				<ifStatement>
					<keyword> if </keyword> 
					<symbol> ( </symbol> 
					<expression>
						<term>
							<identifier> direction </identifier> 
						</term>
						<symbol> = </symbol> 
						<term>
							<integerConstant> 3 </integerConstant> 
						</term>
						<symbol> &amp; </symbol> 
						<term>
							<symbol> ( </symbol> 
							<expression>
								<term>
									<identifier> currDir </identifier> 
								</term>
								<symbol> = </symbol> 
								<term>
									<integerConstant> 4 </integerConstant> 
								</term>
							</expression>
							<symbol> ) </symbol> 
						</term>
					</expression>
					<symbol> ) </symbol> 
					<symbol> { </symbol> 
					<statements>
						<letStatement>
							<keyword> let </keyword> 
							<identifier> direction </identifier> 
							<symbol> = </symbol> 
							<expression>
								<term>
									<identifier> currDir </identifier> 
								</term>
							</expression>
							<symbol> ; </symbol> 
						</letStatement>
					</statements>
					<symbol> } </symbol> 
				</ifStatement>
				<ifStatement>
					<keyword> if </keyword> 
					<symbol> ( </symbol> 
					<expression>
						<term>
							<identifier> direction </identifier> 
						</term>
						<symbol> = </symbol> 
						<term>
							<integerConstant> 4 </integerConstant> 
						</term>
						<symbol> &amp; </symbol> 
						<term>
							<symbol> ~ </symbol> 
							<term>
								<symbol> ( </symbol> 
								<expression>
									<term>
										<identifier> currDir </identifier> 
									</term>
									<symbol> = </symbol> 
									<term>
										<integerConstant> 3 </integerConstant> 
									</term>
								</expression>
								<symbol> ) </symbol> 
							</term>
						</term>
					</expression>
					<symbol> ) </symbol> 
					<symbol> { </symbol> 
					<statements>
						<doStatement>
							<keyword> do </keyword> 
							<identifier> snake </identifier> 
							<symbol> . </symbol> 
							<identifier> moveRight </identifier> 
							<symbol> ( </symbol> 
							<expressionList>
							</expressionList>
							<symbol> ) </symbol> 
							<symbol> ; </symbol> 
						</doStatement>
						<doStatement>
							<keyword> do </keyword> 
							<identifier> snake </identifier> 
							<symbol> . </symbol> 
							<identifier> updateSnake </identifier> 
							<symbol> ( </symbol> 
							<expressionList>
							</expressionList>
							<symbol> ) </symbol> 
							<symbol> ; </symbol> 
						</doStatement>
						<doStatement>
							<keyword> do </keyword> 
							<identifier> snake </identifier> 
							<symbol> . </symbol> 
							<identifier> setCurrDir </identifier> 
							<symbol> ( </symbol> 
							<expressionList>
								<expression>
									<term>
										<integerConstant> 4 </integerConstant> 
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol> 
							<symbol> ; </symbol> 
						</doStatement>
					</statements>
					<symbol> } </symbol> 
				</ifStatement>
				<ifStatement>
					<keyword> if </keyword> 
					<symbol> ( </symbol> 
					<expression>
						<term>
							<identifier> direction </identifier> 
						</term>
						<symbol> = </symbol> 
						<term>
							<integerConstant> 4 </integerConstant> 
						</term>
						<symbol> &amp; </symbol> 
						<term>
							<symbol> ( </symbol> 
							<expression>
								<term>
									<identifier> currDir </identifier> 
								</term>
								<symbol> = </symbol> 
								<term>
									<integerConstant> 3 </integerConstant> 
								</term>
							</expression>
							<symbol> ) </symbol> 
						</term>
					</expression>
					<symbol> ) </symbol> 
					<symbol> { </symbol> 
					<statements>
						<letStatement>
							<keyword> let </keyword> 
							<identifier> direction </identifier> 
							<symbol> = </symbol> 
							<expression>
								<term>
									<identifier> currDir </identifier> 
								</term>
							</expression>
							<symbol> ; </symbol> 
						</letStatement>
					</statements>
					<symbol> } </symbol> 
				</ifStatement>
				<returnStatement>
					<keyword> return </keyword> 
					<symbol> ; </symbol> 
				</returnStatement>
			</statements>
			<symbol> } </symbol> 
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword> 
		<keyword> void </keyword> 
		<identifier> drawBorder </identifier> 
		<symbol> ( </symbol> 
		<parameterList>
		</parameterList>
		<symbol> ) </symbol> 
		<subroutineBody>
			<symbol> { </symbol> 
			<varDec>
				<keyword> var </keyword> 
				<identifier> String </identifier> 
				<identifier> livesString </identifier> 
				<symbol> ; </symbol> 
			</varDec>
			<varDec>
				<keyword> var </keyword> 
				<identifier> String </identifier> 
				<identifier> scoreString </identifier> 
				<symbol> ; </symbol> 
			</varDec>
			<statements>
				<letStatement>
					<keyword> let </keyword> 
					<identifier> livesString </identifier> 
					<symbol> = </symbol> 
					<expression>
						<term>
							<identifier> String </identifier> 
							<symbol> . </symbol> 
							<identifier> new </identifier> 
							<symbol> ( </symbol> 
							<expressionList>
								<expression>
									<term>
										<integerConstant> 5 </integerConstant> 
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol> 
						</term>
					</expression>
					<symbol> ; </symbol> 
				</letStatement>
				<doStatement>
					<keyword> do </keyword> 
					<identifier> livesString </identifier> 
					<symbol> . </symbol> 
					<identifier> setInt </identifier> 
					<symbol> ( </symbol> 
					<expressionList>
						<expression>
							<term>
								<identifier> lives </identifier> 
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol> 
					<symbol> ; </symbol> 
				</doStatement>
				<letStatement>
					<keyword> let </keyword> 
					<identifier> scoreString </identifier> 
					<symbol> = </symbol> 
					<expression>
						<term>
							<identifier> String </identifier> 
							<symbol> . </symbol> 
							<identifier> new </identifier> 
							<symbol> ( </symbol> 
							<expressionList>
								<expression>
									<term>
										<integerConstant> 10 </integerConstant> 
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol> 
						</term>
					</expression>
					<symbol> ; </symbol> 
				</letStatement>
				<doStatement>
					<keyword> do </keyword> 
					<identifier> Output </identifier> 
					<symbol> . </symbol> 
					<identifier> moveCursor </identifier> 
					<symbol> ( </symbol> 
					<expressionList>
						<expression>
							<term>
								<integerConstant> 0 </integerConstant> 
							</term>
						</expression>
						<symbol> , </symbol> 
						<expression>
							<term>
								<integerConstant> 0 </integerConstant> 
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol> 
					<symbol> ; </symbol> 
				</doStatement>
				<doStatement>
					<keyword> do </keyword> 
					<identifier> scoreString </identifier> 
					<symbol> . </symbol> 
					<identifier> setInt </identifier> 
					<symbol> ( </symbol> 
					<expressionList>
						<expression>
							<term>
								<identifier> score </identifier> 
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol> 
					<symbol> ; </symbol> 
				</doStatement>
				<doStatement>
					<keyword> do </keyword> 
					<identifier> Output </identifier> 
					<symbol> . </symbol> 
					<identifier> println </identifier> 
					<symbol> ( </symbol> 
					<expressionList>
					</expressionList>
					<symbol> ) </symbol> 
					<symbol> ; </symbol> 
				</doStatement>
				<doStatement>
					<keyword> do </keyword> 
					<identifier> Output </identifier> 
					<symbol> . </symbol> 
					<identifier> printString </identifier> 
					<symbol> ( </symbol> 
					<expressionList>
						<expression>
							<term>
								<stringConstant> Snake! </stringConstant> 
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol> 
					<symbol> ; </symbol> 
				</doStatement>
				<doStatement>
					<keyword> do </keyword> 
					<identifier> Output </identifier> 
					<symbol> . </symbol> 
					<identifier> println </identifier> 
					<symbol> ( </symbol> 
					<expressionList>
					</expressionList>
					<symbol> ) </symbol> 
					<symbol> ; </symbol> 
				</doStatement>
				<doStatement>
					<keyword> do </keyword> 
					<identifier> Output </identifier> 
					<symbol> . </symbol> 
					<identifier> printString </identifier> 
					<symbol> ( </symbol> 
					<expressionList>
						<expression>
							<term>
								<stringConstant> Lives:  </stringConstant> 
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol> 
					<symbol> ; </symbol> 
				</doStatement>
				<doStatement>
					<keyword> do </keyword> 
					<identifier> Output </identifier> 
					<symbol> . </symbol> 
					<identifier> printInt </identifier> 
					<symbol> ( </symbol> 
					<expressionList>
						<expression>
							<term>
								<identifier> lives </identifier> 
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol> 
					<symbol> ; </symbol> 
				</doStatement>
				<doStatement>
					<keyword> do </keyword> 
					<identifier> Output </identifier> 
					<symbol> . </symbol> 
					<identifier> println </identifier> 
					<symbol> ( </symbol> 
					<expressionList>
					</expressionList>
					<symbol> ) </symbol> 
					<symbol> ; </symbol> 
				</doStatement>
				<doStatement>
					<keyword> do </keyword> 
					<identifier> Output </identifier> 
					<symbol> . </symbol> 
					<identifier> printString </identifier> 
					<symbol> ( </symbol> 
					<expressionList>
						<expression>
							<term>
								<stringConstant> Score:  </stringConstant> 
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol> 
					<symbol> ; </symbol> 
				</doStatement>
				<doStatement>
					<keyword> do </keyword> 
					<identifier> Output </identifier> 
					<symbol> . </symbol> 
					<identifier> printInt </identifier> 
					<symbol> ( </symbol> 
					<expressionList>
						<expression>
							<term>
								<identifier> score </identifier> 
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol> 
					<symbol> ; </symbol> 
				</doStatement>
				<doStatement>
					<keyword> do </keyword> 
					<identifier> Output </identifier> 
					<symbol> . </symbol> 
					<identifier> println </identifier> 
					<symbol> ( </symbol> 
					<expressionList>
					</expressionList>
					<symbol> ) </symbol> 
					<symbol> ; </symbol> 
				</doStatement>
				<doStatement>
					<keyword> do </keyword> 
					<identifier> Output </identifier> 
					<symbol> . </symbol> 
					<identifier> println </identifier> 
					<symbol> ( </symbol> 
					<expressionList>
					</expressionList>
					<symbol> ) </symbol> 
					<symbol> ; </symbol> 
				</doStatement>
				<doStatement>
					<keyword> do </keyword> 
					<identifier> Output </identifier> 
					<symbol> . </symbol> 
					<identifier> printString </identifier> 
					<symbol> ( </symbol> 
					<expressionList>
						<expression>
							<term>
								<stringConstant> Hi-score:  </stringConstant> 
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol> 
					<symbol> ; </symbol> 
				</doStatement>
				<doStatement>
					<keyword> do </keyword> 
					<identifier> Output </identifier> 
					<symbol> . </symbol> 
					<identifier> println </identifier> 
					<symbol> ( </symbol> 
					<expressionList>
					</expressionList>
					<symbol> ) </symbol> 
					<symbol> ; </symbol> 
				</doStatement>
				<doStatement>
					<keyword> do </keyword> 
					<identifier> Output </identifier> 
					<symbol> . </symbol> 
					<identifier> printInt </identifier> 
					<symbol> ( </symbol> 
					<expressionList>
						<expression>
							<term>
								<identifier> highScore </identifier> 
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol> 
					<symbol> ; </symbol> 
				</doStatement>
				<doStatement>
					<keyword> do </keyword> 
					<identifier> Screen </identifier> 
					<symbol> . </symbol> 
					<identifier> setColor </identifier> 
					<symbol> ( </symbol> 
					<expressionList>
						<expression>
							<term>
								<keyword> true </keyword> 
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol> 
					<symbol> ; </symbol> 
				</doStatement>
				<doStatement>
					<keyword> do </keyword> 
					<identifier> Screen </identifier> 
					<symbol> . </symbol> 
					<identifier> drawLine </identifier> 
					<symbol> ( </symbol> 
					<expressionList>
						<expression>
							<term>
								<integerConstant> 100 </integerConstant> 
							</term>
						</expression>
						<symbol> , </symbol> 
						<expression>
							<term>
								<integerConstant> 0 </integerConstant> 
							</term>
						</expression>
						<symbol> , </symbol> 
						<expression>
							<term>
								<integerConstant> 100 </integerConstant> 
							</term>
						</expression>
						<symbol> , </symbol> 
						<expression>
							<term>
								<integerConstant> 255 </integerConstant> 
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol> 
					<symbol> ; </symbol> 
				</doStatement>
				<doStatement>
					<keyword> do </keyword> 
					<identifier> Screen </identifier> 
					<symbol> . </symbol> 
					<identifier> drawLine </identifier> 
					<symbol> ( </symbol> 
					<expressionList>
						<expression>
							<term>
								<integerConstant> 99 </integerConstant> 
							</term>
						</expression>
						<symbol> , </symbol> 
						<expression>
							<term>
								<integerConstant> 0 </integerConstant> 
							</term>
						</expression>
						<symbol> , </symbol> 
						<expression>
							<term>
								<integerConstant> 99 </integerConstant> 
							</term>
						</expression>
						<symbol> , </symbol> 
						<expression>
							<term>
								<integerConstant> 255 </integerConstant> 
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol> 
					<symbol> ; </symbol> 
				</doStatement>
				<doStatement>
					<keyword> do </keyword> 
					<identifier> Screen </identifier> 
					<symbol> . </symbol> 
					<identifier> drawLine </identifier> 
					<symbol> ( </symbol> 
					<expressionList>
						<expression>
							<term>
								<integerConstant> 511 </integerConstant> 
							</term>
						</expression>
						<symbol> , </symbol> 
						<expression>
							<term>
								<integerConstant> 0 </integerConstant> 
							</term>
						</expression>
						<symbol> , </symbol> 
						<expression>
							<term>
								<integerConstant> 511 </integerConstant> 
							</term>
						</expression>
						<symbol> , </symbol> 
						<expression>
							<term>
								<integerConstant> 255 </integerConstant> 
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol> 
					<symbol> ; </symbol> 
				</doStatement>
				<doStatement>
					<keyword> do </keyword> 
					<identifier> Screen </identifier> 
					<symbol> . </symbol> 
					<identifier> drawLine </identifier> 
					<symbol> ( </symbol> 
					<expressionList>
						<expression>
							<term>
								<integerConstant> 510 </integerConstant> 
							</term>
						</expression>
						<symbol> , </symbol> 
						<expression>
							<term>
								<integerConstant> 0 </integerConstant> 
							</term>
						</expression>
						<symbol> , </symbol> 
						<expression>
							<term>
								<integerConstant> 510 </integerConstant> 
							</term>
						</expression>
						<symbol> , </symbol> 
						<expression>
							<term>
								<integerConstant> 255 </integerConstant> 
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol> 
					<symbol> ; </symbol> 
				</doStatement>
				<doStatement>
					<keyword> do </keyword> 
					<identifier> Screen </identifier> 
					<symbol> . </symbol> 
					<identifier> drawLine </identifier> 
					<symbol> ( </symbol> 
					<expressionList>
						<expression>
							<term>
								<integerConstant> 100 </integerConstant> 
							</term>
						</expression>
						<symbol> , </symbol> 
						<expression>
							<term>
								<integerConstant> 0 </integerConstant> 
							</term>
						</expression>
						<symbol> , </symbol> 
						<expression>
							<term>
								<integerConstant> 511 </integerConstant> 
							</term>
						</expression>
						<symbol> , </symbol> 
						<expression>
							<term>
								<integerConstant> 0 </integerConstant> 
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol> 
					<symbol> ; </symbol> 
				</doStatement>
				<doStatement>
					<keyword> do </keyword> 
					<identifier> Screen </identifier> 
					<symbol> . </symbol> 
					<identifier> drawLine </identifier> 
					<symbol> ( </symbol> 
					<expressionList>
						<expression>
							<term>
								<integerConstant> 100 </integerConstant> 
							</term>
						</expression>
						<symbol> , </symbol> 
						<expression>
							<term>
								<integerConstant> 1 </integerConstant> 
							</term>
						</expression>
						<symbol> , </symbol> 
						<expression>
							<term>
								<integerConstant> 511 </integerConstant> 
							</term>
						</expression>
						<symbol> , </symbol> 
						<expression>
							<term>
								<integerConstant> 1 </integerConstant> 
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol> 
					<symbol> ; </symbol> 
				</doStatement>
				<doStatement>
					<keyword> do </keyword> 
					<identifier> Screen </identifier> 
					<symbol> . </symbol> 
					<identifier> drawLine </identifier> 
					<symbol> ( </symbol> 
					<expressionList>
						<expression>
							<term>
								<integerConstant> 100 </integerConstant> 
							</term>
						</expression>
						<symbol> , </symbol> 
						<expression>
							<term>
								<integerConstant> 255 </integerConstant> 
							</term>
						</expression>
						<symbol> , </symbol> 
						<expression>
							<term>
								<integerConstant> 511 </integerConstant> 
							</term>
						</expression>
						<symbol> , </symbol> 
						<expression>
							<term>
								<integerConstant> 255 </integerConstant> 
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol> 
					<symbol> ; </symbol> 
				</doStatement>
				<doStatement>
					<keyword> do </keyword> 
					<identifier> Screen </identifier> 
					<symbol> . </symbol> 
					<identifier> drawLine </identifier> 
					<symbol> ( </symbol> 
					<expressionList>
						<expression>
							<term>
								<integerConstant> 100 </integerConstant> 
							</term>
						</expression>
						<symbol> , </symbol> 
						<expression>
							<term>
								<integerConstant> 254 </integerConstant> 
							</term>
						</expression>
						<symbol> , </symbol> 
						<expression>
							<term>
								<integerConstant> 511 </integerConstant> 
							</term>
						</expression>
						<symbol> , </symbol> 
						<expression>
							<term>
								<integerConstant> 254 </integerConstant> 
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol> 
					<symbol> ; </symbol> 
				</doStatement>
				<returnStatement>
					<keyword> return </keyword> 
					<symbol> ; </symbol> 
				</returnStatement>
			</statements>
			<symbol> } </symbol> 
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword> 
		<keyword> void </keyword> 
		<identifier> run </identifier> 
		<symbol> ( </symbol> 
		<parameterList>
		</parameterList>
		<symbol> ) </symbol> 
		<subroutineBody>
			<symbol> { </symbol> 
			<varDec>
				<keyword> var </keyword> 
				<keyword> char </keyword> 
				<identifier> key </identifier> 
				<symbol> ; </symbol> 
			</varDec>
			<varDec>
				<keyword> var </keyword> 
				<keyword> int </keyword> 
				<identifier> timer </identifier> 
				<symbol> ; </symbol> 
			</varDec>
			<statements>
				<letStatement>
					<keyword> let </keyword> 
					<identifier> timer </identifier> 
					<symbol> = </symbol> 
					<expression>
						<term>
							<integerConstant> 0 </integerConstant> 
						</term>
					</expression>
					<symbol> ; </symbol> 
				</letStatement>
				<doStatement>
					<keyword> do </keyword> 
					<identifier> drawBorder </identifier> 
					<symbol> ( </symbol> 
					<expressionList>
					</expressionList>
					<symbol> ) </symbol> 
					<symbol> ; </symbol> 
				</doStatement>
				<whileStatement>
					<keyword> while </keyword> 
					<symbol> ( </symbol> 
					<expression>
						<term>
							<symbol> ~ </symbol> 
							<term>
								<identifier> exit </identifier> 
							</term>
						</term>
					</expression>
					<symbol> ) </symbol> 
					<symbol> { </symbol> 
					<statements>
						<whileStatement>
							<keyword> while </keyword> 
							<symbol> ( </symbol> 
							<expression>
								<term>
									<identifier> key </identifier> 
								</term>
								<symbol> = </symbol> 
								<term>
									<integerConstant> 0 </integerConstant> 
								</term>
							</expression>
							<symbol> ) </symbol> 
							<symbol> { </symbol> 
							<statements>
								<letStatement>
									<keyword> let </keyword> 
									<identifier> key </identifier> 
									<symbol> = </symbol> 
									<expression>
										<term>
											<identifier> Keyboard </identifier> 
											<symbol> . </symbol> 
											<identifier> keyPressed </identifier> 
											<symbol> ( </symbol> 
											<expressionList>
											</expressionList>
											<symbol> ) </symbol> 
										</term>
									</expression>
									<symbol> ; </symbol> 
								</letStatement>
								<doStatement>
									<keyword> do </keyword> 
									<identifier> moveSnake </identifier> 
									<symbol> ( </symbol> 
									<expressionList>
									</expressionList>
									<symbol> ) </symbol> 
									<symbol> ; </symbol> 
								</doStatement>
							</statements>
							<symbol> } </symbol> 
						</whileStatement>
						<letStatement>
							<keyword> let </keyword> 
							<identifier> timer </identifier> 
							<symbol> = </symbol> 
							<expression>
								<term>
									<identifier> timer </identifier> 
								</term>
								<symbol> + </symbol> 
								<term>
									<integerConstant> 1 </integerConstant> 
								</term>
							</expression>
							<symbol> ; </symbol> 
						</letStatement>
						<ifStatement>
							<keyword> if </keyword> 
							<symbol> ( </symbol> 
							<expression>
								<term>
									<symbol> ( </symbol> 
									<expression>
										<term>
											<identifier> timer </identifier> 
										</term>
										<symbol> / </symbol> 
										<term>
											<integerConstant> 10 </integerConstant> 
										</term>
									</expression>
									<symbol> ) </symbol> 
								</term>
								<symbol> = </symbol> 
								<term>
									<integerConstant> 1 </integerConstant> 
								</term>
							</expression>
							<symbol> ) </symbol> 
							<symbol> { </symbol> 
							<statements>
								<letStatement>
									<keyword> let </keyword> 
									<identifier> score </identifier> 
									<symbol> = </symbol> 
									<expression>
										<term>
											<identifier> score </identifier> 
										</term>
										<symbol> + </symbol> 
										<term>
											<integerConstant> 1 </integerConstant> 
										</term>
									</expression>
									<symbol> ; </symbol> 
								</letStatement>
								<doStatement>
									<keyword> do </keyword> 
									<identifier> Output </identifier> 
									<symbol> . </symbol> 
									<identifier> moveCursor </identifier> 
									<symbol> ( </symbol> 
									<expressionList>
										<expression>
											<term>
												<integerConstant> 3 </integerConstant> 
											</term>
										</expression>
										<symbol> , </symbol> 
										<expression>
											<term>
												<integerConstant> 7 </integerConstant> 
											</term>
										</expression>
									</expressionList>
									<symbol> ) </symbol> 
									<symbol> ; </symbol> 
								</doStatement>
								<doStatement>
									<keyword> do </keyword> 
									<identifier> Output </identifier> 
									<symbol> . </symbol> 
									<identifier> printInt </identifier> 
									<symbol> ( </symbol> 
									<expressionList>
										<expression>
											<term>
												<identifier> score </identifier> 
											</term>
										</expression>
									</expressionList>
									<symbol> ) </symbol> 
									<symbol> ; </symbol> 
								</doStatement>
								<letStatement>
									<keyword> let </keyword> 
									<identifier> timer </identifier> 
									<symbol> = </symbol> 
									<expression>
										<term>
											<integerConstant> 0 </integerConstant> 
										</term>
									</expression>
									<symbol> ; </symbol> 
								</letStatement>
							</statements>
							<symbol> } </symbol> 
						</ifStatement>
						<ifStatement>
							<keyword> if </keyword> 
							<symbol> ( </symbol> 
							<expression>
								<term>
									<identifier> key </identifier> 
								</term>
								<symbol> = </symbol> 
								<term>
									<integerConstant> 81 </integerConstant> 
								</term>
							</expression>
							<symbol> ) </symbol> 
							<symbol> { </symbol> 
							<statements>
								<letStatement>
									<keyword> let </keyword> 
									<identifier> exit </identifier> 
									<symbol> = </symbol> 
									<expression>
										<term>
											<keyword> true </keyword> 
										</term>
									</expression>
									<symbol> ; </symbol> 
								</letStatement>
							</statements>
							<symbol> } </symbol> 
						</ifStatement>
						<ifStatement>
							<keyword> if </keyword> 
							<symbol> ( </symbol> 
							<expression>
								<term>
									<identifier> key </identifier> 
								</term>
								<symbol> = </symbol> 
								<term>
									<integerConstant> 131 </integerConstant> 
								</term>
							</expression>
							<symbol> ) </symbol> 
							<symbol> { </symbol> 
							<statements>
								<letStatement>
									<keyword> let </keyword> 
									<identifier> direction </identifier> 
									<symbol> = </symbol> 
									<expression>
										<term>
											<integerConstant> 1 </integerConstant> 
										</term>
									</expression>
									<symbol> ; </symbol> 
								</letStatement>
							</statements>
							<symbol> } </symbol> 
						</ifStatement>
						<ifStatement>
							<keyword> if </keyword> 
							<symbol> ( </symbol> 
							<expression>
								<term>
									<identifier> key </identifier> 
								</term>
								<symbol> = </symbol> 
								<term>
									<integerConstant> 133 </integerConstant> 
								</term>
							</expression>
							<symbol> ) </symbol> 
							<symbol> { </symbol> 
							<statements>
								<letStatement>
									<keyword> let </keyword> 
									<identifier> direction </identifier> 
									<symbol> = </symbol> 
									<expression>
										<term>
											<integerConstant> 2 </integerConstant> 
										</term>
									</expression>
									<symbol> ; </symbol> 
								</letStatement>
							</statements>
							<symbol> } </symbol> 
						</ifStatement>
						<ifStatement>
							<keyword> if </keyword> 
							<symbol> ( </symbol> 
							<expression>
								<term>
									<identifier> key </identifier> 
								</term>
								<symbol> = </symbol> 
								<term>
									<integerConstant> 130 </integerConstant> 
								</term>
								<symbol> &amp; </symbol> 
								<term>
									<symbol> ~ </symbol> 
									<term>
										<symbol> ( </symbol> 
										<expression>
											<term>
												<identifier> direction </identifier> 
											</term>
											<symbol> = </symbol> 
											<term>
												<integerConstant> 0 </integerConstant> 
											</term>
										</expression>
										<symbol> ) </symbol> 
									</term>
								</term>
							</expression>
							<symbol> ) </symbol> 
							<symbol> { </symbol> 
							<statements>
								<letStatement>
									<keyword> let </keyword> 
									<identifier> direction </identifier> 
									<symbol> = </symbol> 
									<expression>
										<term>
											<integerConstant> 3 </integerConstant> 
										</term>
									</expression>
									<symbol> ; </symbol> 
								</letStatement>
							</statements>
							<symbol> } </symbol> 
						</ifStatement>
						<ifStatement>
							<keyword> if </keyword> 
							<symbol> ( </symbol> 
							<expression>
								<term>
									<identifier> key </identifier> 
								</term>
								<symbol> = </symbol> 
								<term>
									<integerConstant> 132 </integerConstant> 
								</term>
							</expression>
							<symbol> ) </symbol> 
							<symbol> { </symbol> 
							<statements>
								<letStatement>
									<keyword> let </keyword> 
									<identifier> direction </identifier> 
									<symbol> = </symbol> 
									<expression>
										<term>
											<integerConstant> 4 </integerConstant> 
										</term>
									</expression>
									<symbol> ; </symbol> 
								</letStatement>
							</statements>
							<symbol> } </symbol> 
						</ifStatement>
						<whileStatement>
							<keyword> while </keyword> 
							<symbol> ( </symbol> 
							<expression>
								<term>
									<symbol> ~ </symbol> 
									<term>
										<symbol> ( </symbol> 
										<expression>
											<term>
												<identifier> key </identifier> 
											</term>
											<symbol> = </symbol> 
											<term>
												<integerConstant> 0 </integerConstant> 
											</term>
										</expression>
										<symbol> ) </symbol> 
									</term>
								</term>
							</expression>
							<symbol> ) </symbol> 
							<symbol> { </symbol> 
							<statements>
								<letStatement>
									<keyword> let </keyword> 
									<identifier> key </identifier> 
									<symbol> = </symbol> 
									<expression>
										<term>
											<identifier> Keyboard </identifier> 
											<symbol> . </symbol> 
											<identifier> keyPressed </identifier> 
											<symbol> ( </symbol> 
											<expressionList>
											</expressionList>
											<symbol> ) </symbol> 
										</term>
									</expression>
									<symbol> ; </symbol> 
								</letStatement>
								<doStatement>
									<keyword> do </keyword> 
									<identifier> moveSnake </identifier> 
									<symbol> ( </symbol> 
									<expressionList>
									</expressionList>
									<symbol> ) </symbol> 
									<symbol> ; </symbol> 
								</doStatement>
							</statements>
							<symbol> } </symbol> 
						</whileStatement>
					</statements>
					<symbol> } </symbol> 
				</whileStatement>
				<returnStatement>
					<keyword> return </keyword> 
					<symbol> ; </symbol> 
				</returnStatement>
			</statements>
			<symbol> } </symbol> 
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword> 
		<keyword> void </keyword> 
		<identifier> death </identifier> 
		<symbol> ( </symbol> 
		<parameterList>
		</parameterList>
		<symbol> ) </symbol> 
		<subroutineBody>
			<symbol> { </symbol> 
			<statements>
				<letStatement>
					<keyword> let </keyword> 
					<identifier> lives </identifier> 
					<symbol> = </symbol> 
					<expression>
						<term>
							<identifier> lives </identifier> 
						</term>
						<symbol> - </symbol> 
						<term>
							<integerConstant> 1 </integerConstant> 
						</term>
					</expression>
					<symbol> ; </symbol> 
				</letStatement>
				<doStatement>
					<keyword> do </keyword> 
					<identifier> snake </identifier> 
					<symbol> . </symbol> 
					<identifier> setAlive </identifier> 
					<symbol> ( </symbol> 
					<expressionList>
						<expression>
							<term>
								<keyword> true </keyword> 
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol> 
					<symbol> ; </symbol> 
				</doStatement>
				<ifStatement>
					<keyword> if </keyword> 
					<symbol> ( </symbol> 
					<expression>
						<term>
							<identifier> score </identifier> 
						</term>
						<symbol> &gt; </symbol> 
						<term>
							<identifier> highScore </identifier> 
						</term>
					</expression>
					<symbol> ) </symbol> 
					<symbol> { </symbol> 
					<statements>
						<letStatement>
							<keyword> let </keyword> 
							<identifier> highScore </identifier> 
							<symbol> = </symbol> 
							<expression>
								<term>
									<identifier> score </identifier> 
								</term>
							</expression>
							<symbol> ; </symbol> 
						</letStatement>
						<letStatement>
							<keyword> let </keyword> 
							<identifier> score </identifier> 
							<symbol> = </symbol> 
							<expression>
								<term>
									<integerConstant> 0 </integerConstant> 
								</term>
							</expression>
							<symbol> ; </symbol> 
						</letStatement>
					</statements>
					<symbol> } </symbol> 
				</ifStatement>
				<ifStatement>
					<keyword> if </keyword> 
					<symbol> ( </symbol> 
					<expression>
						<term>
							<identifier> lives </identifier> 
						</term>
						<symbol> &gt; </symbol> 
						<term>
							<integerConstant> 0 </integerConstant> 
						</term>
					</expression>
					<symbol> ) </symbol> 
					<symbol> { </symbol> 
					<statements>
						<doStatement>
							<keyword> do </keyword> 
							<identifier> snake </identifier> 
							<symbol> . </symbol> 
							<identifier> initSnake </identifier> 
							<symbol> ( </symbol> 
							<expressionList>
								<expression>
									<term>
										<integerConstant> 300 </integerConstant> 
									</term>
								</expression>
								<symbol> , </symbol> 
								<expression>
									<term>
										<integerConstant> 126 </integerConstant> 
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol> 
							<symbol> ; </symbol> 
						</doStatement>
						<doStatement>
							<keyword> do </keyword> 
							<identifier> Screen </identifier> 
							<symbol> . </symbol> 
							<identifier> clearScreen </identifier> 
							<symbol> ( </symbol> 
							<expressionList>
							</expressionList>
							<symbol> ) </symbol> 
							<symbol> ; </symbol> 
						</doStatement>
						<doStatement>
							<keyword> do </keyword> 
							<identifier> drawBorder </identifier> 
							<symbol> ( </symbol> 
							<expressionList>
							</expressionList>
							<symbol> ) </symbol> 
							<symbol> ; </symbol> 
						</doStatement>
						<letStatement>
							<keyword> let </keyword> 
							<identifier> direction </identifier> 
							<symbol> = </symbol> 
							<expression>
								<term>
									<integerConstant> 0 </integerConstant> 
								</term>
							</expression>
							<symbol> ; </symbol> 
						</letStatement>
						<doStatement>
							<keyword> do </keyword> 
							<identifier> snake </identifier> 
							<symbol> . </symbol> 
							<identifier> draw </identifier> 
							<symbol> ( </symbol> 
							<expressionList>
							</expressionList>
							<symbol> ) </symbol> 
							<symbol> ; </symbol> 
						</doStatement>
						<doStatement>
							<keyword> do </keyword> 
							<identifier> apple </identifier> 
							<symbol> ( </symbol> 
							<expressionList>
							</expressionList>
							<symbol> ) </symbol> 
							<symbol> ; </symbol> 
						</doStatement>
					</statements>
					<symbol> } </symbol> 
					<keyword> else </keyword> 
					<symbol> { </symbol> 
					<statements>
						<doStatement>
							<keyword> do </keyword> 
							<identifier> snake </identifier> 
							<symbol> . </symbol> 
							<identifier> erase </identifier> 
							<symbol> ( </symbol> 
							<expressionList>
							</expressionList>
							<symbol> ) </symbol> 
							<symbol> ; </symbol> 
						</doStatement>
						<doStatement>
							<keyword> do </keyword> 
							<identifier> snake </identifier> 
							<symbol> . </symbol> 
							<identifier> initSnake </identifier> 
							<symbol> ( </symbol> 
							<expressionList>
								<expression>
									<term>
										<integerConstant> 300 </integerConstant> 
									</term>
								</expression>
								<symbol> , </symbol> 
								<expression>
									<term>
										<integerConstant> 126 </integerConstant> 
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol> 
							<symbol> ; </symbol> 
						</doStatement>
						<doStatement>
							<keyword> do </keyword> 
							<identifier> gameOver </identifier> 
							<symbol> ( </symbol> 
							<expressionList>
							</expressionList>
							<symbol> ) </symbol> 
							<symbol> ; </symbol> 
						</doStatement>
					</statements>
					<symbol> } </symbol> 
				</ifStatement>
				<returnStatement>
					<keyword> return </keyword> 
					<symbol> ; </symbol> 
				</returnStatement>
			</statements>
			<symbol> } </symbol> 
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword> 
		<keyword> void </keyword> 
		<identifier> gameOver </identifier> 
		<symbol> ( </symbol> 
		<parameterList>
		</parameterList>
		<symbol> ) </symbol> 
		<subroutineBody>
			<symbol> { </symbol> 
			<varDec>
				<keyword> var </keyword> 
				<keyword> char </keyword> 
				<identifier> key </identifier> 
				<symbol> ; </symbol> 
			</varDec>
			<statements>
				<doStatement>
					<keyword> do </keyword> 
					<identifier> Screen </identifier> 
					<symbol> . </symbol> 
					<identifier> clearScreen </identifier> 
					<symbol> ( </symbol> 
					<expressionList>
					</expressionList>
					<symbol> ) </symbol> 
					<symbol> ; </symbol> 
				</doStatement>
				<doStatement>
					<keyword> do </keyword> 
					<identifier> Output </identifier> 
					<symbol> . </symbol> 
					<identifier> moveCursor </identifier> 
					<symbol> ( </symbol> 
					<expressionList>
						<expression>
							<term>
								<integerConstant> 11 </integerConstant> 
							</term>
						</expression>
						<symbol> , </symbol> 
						<expression>
							<term>
								<integerConstant> 22 </integerConstant> 
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol> 
					<symbol> ; </symbol> 
				</doStatement>
				<doStatement>
					<keyword> do </keyword> 
					<identifier> Output </identifier> 
					<symbol> . </symbol> 
					<identifier> printString </identifier> 
					<symbol> ( </symbol> 
					<expressionList>
						<expression>
							<term>
								<stringConstant> Game Over </stringConstant> 
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol> 
					<symbol> ; </symbol> 
				</doStatement>
				<doStatement>
					<keyword> do </keyword> 
					<identifier> Output </identifier> 
					<symbol> . </symbol> 
					<identifier> moveCursor </identifier> 
					<symbol> ( </symbol> 
					<expressionList>
						<expression>
							<term>
								<integerConstant> 13 </integerConstant> 
							</term>
						</expression>
						<symbol> , </symbol> 
						<expression>
							<term>
								<integerConstant> 22 </integerConstant> 
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol> 
					<symbol> ; </symbol> 
				</doStatement>
				<doStatement>
					<keyword> do </keyword> 
					<identifier> Output </identifier> 
					<symbol> . </symbol> 
					<identifier> printString </identifier> 
					<symbol> ( </symbol> 
					<expressionList>
						<expression>
							<term>
								<stringConstant> High Score:  </stringConstant> 
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol> 
					<symbol> ; </symbol> 
				</doStatement>
				<doStatement>
					<keyword> do </keyword> 
					<identifier> Output </identifier> 
					<symbol> . </symbol> 
					<identifier> printInt </identifier> 
					<symbol> ( </symbol> 
					<expressionList>
						<expression>
							<term>
								<identifier> highScore </identifier> 
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol> 
					<symbol> ; </symbol> 
				</doStatement>
				<whileStatement>
					<keyword> while </keyword> 
					<symbol> ( </symbol> 
					<expression>
						<term>
							<symbol> ~ </symbol> 
							<term>
								<identifier> exit </identifier> 
							</term>
						</term>
					</expression>
					<symbol> ) </symbol> 
					<symbol> { </symbol> 
					<statements>
						<letStatement>
							<keyword> let </keyword> 
							<identifier> key </identifier> 
							<symbol> = </symbol> 
							<expression>
								<term>
									<identifier> Keyboard </identifier> 
									<symbol> . </symbol> 
									<identifier> keyPressed </identifier> 
									<symbol> ( </symbol> 
									<expressionList>
									</expressionList>
									<symbol> ) </symbol> 
								</term>
							</expression>
							<symbol> ; </symbol> 
						</letStatement>
						<ifStatement>
							<keyword> if </keyword> 
							<symbol> ( </symbol> 
							<expression>
								<term>
									<identifier> key </identifier> 
								</term>
								<symbol> = </symbol> 
								<term>
									<integerConstant> 81 </integerConstant> 
								</term>
							</expression>
							<symbol> ) </symbol> 
							<symbol> { </symbol> 
							<statements>
								<letStatement>
									<keyword> let </keyword> 
									<identifier> exit </identifier> 
									<symbol> = </symbol> 
									<expression>
										<term>
											<keyword> true </keyword> 
										</term>
									</expression>
									<symbol> ; </symbol> 
								</letStatement>
							</statements>
							<symbol> } </symbol> 
						</ifStatement>
					</statements>
					<symbol> } </symbol> 
				</whileStatement>
				<returnStatement>
					<keyword> return </keyword> 
					<symbol> ; </symbol> 
				</returnStatement>
			</statements>
			<symbol> } </symbol> 
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword> 
		<keyword> void </keyword> 
		<identifier> apple </identifier> 
		<symbol> ( </symbol> 
		<parameterList>
		</parameterList>
		<symbol> ) </symbol> 
		<subroutineBody>
			<symbol> { </symbol> 
			<statements>
				<letStatement>
					<keyword> let </keyword> 
					<identifier> xApple </identifier> 
					<symbol> = </symbol> 
					<expression>
						<term>
							<integerConstant> 150 </integerConstant> 
						</term>
					</expression>
					<symbol> ; </symbol> 
				</letStatement>
				<letStatement>
					<keyword> let </keyword> 
					<identifier> yApple </identifier> 
					<symbol> = </symbol> 
					<expression>
						<term>
							<integerConstant> 150 </integerConstant> 
						</term>
					</expression>
					<symbol> ; </symbol> 
				</letStatement>
				<doStatement>
					<keyword> do </keyword> 
					<identifier> Screen </identifier> 
					<symbol> . </symbol> 
					<identifier> setColor </identifier> 
					<symbol> ( </symbol> 
					<expressionList>
						<expression>
							<term>
								<keyword> true </keyword> 
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol> 
					<symbol> ; </symbol> 
				</doStatement>
				<doStatement>
					<keyword> do </keyword> 
					<identifier> Screen </identifier> 
					<symbol> . </symbol> 
					<identifier> drawCircle </identifier> 
					<symbol> ( </symbol> 
					<expressionList>
						<expression>
							<term>
								<integerConstant> 150 </integerConstant> 
							</term>
						</expression>
						<symbol> , </symbol> 
						<expression>
							<term>
								<integerConstant> 150 </integerConstant> 
							</term>
						</expression>
						<symbol> , </symbol> 
						<expression>
							<term>
								<integerConstant> 5 </integerConstant> 
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol> 
					<symbol> ; </symbol> 
				</doStatement>
				<returnStatement>
					<keyword> return </keyword> 
					<symbol> ; </symbol> 
				</returnStatement>
			</statements>
			<symbol> } </symbol> 
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword> 
		<keyword> int </keyword> 
		<identifier> dist </identifier> 
		<symbol> ( </symbol> 
		<parameterList>
			<keyword> int </keyword> 
			<identifier> xSnake </identifier> 
			<symbol> , </symbol> 
			<keyword> int </keyword> 
			<identifier> ySnake </identifier> 
		</parameterList>
		<symbol> ) </symbol> 
		<subroutineBody>
			<symbol> { </symbol> 
			<varDec>
				<keyword> var </keyword> 
				<keyword> int </keyword> 
				<identifier> distance </identifier> 
				<symbol> ; </symbol> 
			</varDec>
			<varDec>
				<keyword> var </keyword> 
				<keyword> int </keyword> 
				<identifier> xDist </identifier> 
				<symbol> ; </symbol> 
			</varDec>
			<varDec>
				<keyword> var </keyword> 
				<keyword> int </keyword> 
				<identifier> yDist </identifier> 
				<symbol> ; </symbol> 
			</varDec>
			<varDec>
				<keyword> var </keyword> 
				<keyword> int </keyword> 
				<identifier> bothDist </identifier> 
				<symbol> ; </symbol> 
			</varDec>
			<statements>
				<letStatement>
					<keyword> let </keyword> 
					<identifier> xDist </identifier> 
					<symbol> = </symbol> 
					<expression>
						<term>
							<identifier> Math </identifier> 
							<symbol> . </symbol> 
							<identifier> multiply </identifier> 
							<symbol> ( </symbol> 
							<expressionList>
								<expression>
									<term>
										<symbol> ( </symbol> 
										<expression>
											<term>
												<identifier> xApple </identifier> 
											</term>
											<symbol> - </symbol> 
											<term>
												<identifier> xSnake </identifier> 
											</term>
										</expression>
										<symbol> ) </symbol> 
									</term>
								</expression>
								<symbol> , </symbol> 
								<expression>
									<term>
										<symbol> ( </symbol> 
										<expression>
											<term>
												<identifier> xApple </identifier> 
											</term>
											<symbol> - </symbol> 
											<term>
												<identifier> xSnake </identifier> 
											</term>
										</expression>
										<symbol> ) </symbol> 
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol> 
						</term>
					</expression>
					<symbol> ; </symbol> 
				</letStatement>
				<letStatement>
					<keyword> let </keyword> 
					<identifier> yDist </identifier> 
					<symbol> = </symbol> 
					<expression>
						<term>
							<identifier> Math </identifier> 
							<symbol> . </symbol> 
							<identifier> multiply </identifier> 
							<symbol> ( </symbol> 
							<expressionList>
								<expression>
									<term>
										<symbol> ( </symbol> 
										<expression>
											<term>
												<identifier> yApple </identifier> 
											</term>
											<symbol> - </symbol> 
											<term>
												<identifier> ySnake </identifier> 
											</term>
										</expression>
										<symbol> ) </symbol> 
									</term>
								</expression>
								<symbol> , </symbol> 
								<expression>
									<term>
										<symbol> ( </symbol> 
										<expression>
											<term>
												<identifier> yApple </identifier> 
											</term>
											<symbol> - </symbol> 
											<term>
												<identifier> ySnake </identifier> 
											</term>
										</expression>
										<symbol> ) </symbol> 
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol> 
						</term>
					</expression>
					<symbol> ; </symbol> 
				</letStatement>
				<letStatement>
					<keyword> let </keyword> 
					<identifier> bothDist </identifier> 
					<symbol> = </symbol> 
					<expression>
						<term>
							<identifier> xDist </identifier> 
						</term>
						<symbol> + </symbol> 
						<term>
							<identifier> yDist </identifier> 
						</term>
					</expression>
					<symbol> ; </symbol> 
				</letStatement>
				<ifStatement>
					<keyword> if </keyword> 
					<symbol> ( </symbol> 
					<expression>
						<term>
							<identifier> bothDist </identifier> 
						</term>
						<symbol> &gt; </symbol> 
						<term>
							<integerConstant> 0 </integerConstant> 
						</term>
					</expression>
					<symbol> ) </symbol> 
					<symbol> { </symbol> 
					<statements>
						<returnStatement>
							<keyword> return </keyword> 
							<expression>
								<term>
									<identifier> Math </identifier> 
									<symbol> . </symbol> 
									<identifier> sqrt </identifier> 
									<symbol> ( </symbol> 
									<expressionList>
										<expression>
											<term>
												<identifier> bothDist </identifier> 
											</term>
										</expression>
									</expressionList>
									<symbol> ) </symbol> 
								</term>
							</expression>
							<symbol> ; </symbol> 
						</returnStatement>
					</statements>
					<symbol> } </symbol> 
				</ifStatement>
				<returnStatement>
					<keyword> return </keyword> 
					<expression>
						<term>
							<integerConstant> 999 </integerConstant> 
						</term>
					</expression>
					<symbol> ; </symbol> 
				</returnStatement>
			</statements>
			<symbol> } </symbol> 
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword> 
		<keyword> void </keyword> 
		<identifier> pointsApple </identifier> 
		<symbol> ( </symbol> 
		<parameterList>
		</parameterList>
		<symbol> ) </symbol> 
		<subroutineBody>
			<symbol> { </symbol> 
			<varDec>
				<keyword> var </keyword> 
				<keyword> int </keyword> 
				<identifier> distance </identifier> 
				<symbol> ; </symbol> 
			</varDec>
			<varDec>
				<keyword> var </keyword> 
				<keyword> int </keyword> 
				<identifier> snakeLength </identifier> 
				<symbol> ; </symbol> 
			</varDec>
			<statements>
				<letStatement>
					<keyword> let </keyword> 
					<identifier> distance </identifier> 
					<symbol> = </symbol> 
					<expression>
						<term>
							<identifier> dist </identifier> 
							<symbol> ( </symbol> 
							<expressionList>
								<expression>
									<term>
										<identifier> snake </identifier> 
										<symbol> . </symbol> 
										<identifier> getXcord </identifier> 
										<symbol> ( </symbol> 
										<expressionList>
										</expressionList>
										<symbol> ) </symbol> 
									</term>
								</expression>
								<symbol> , </symbol> 
								<expression>
									<term>
										<identifier> snake </identifier> 
										<symbol> . </symbol> 
										<identifier> getYcord </identifier> 
										<symbol> ( </symbol> 
										<expressionList>
										</expressionList>
										<symbol> ) </symbol> 
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol> 
						</term>
					</expression>
					<symbol> ; </symbol> 
				</letStatement>
				<letStatement>
					<keyword> let </keyword> 
					<identifier> appleCounter </identifier> 
					<symbol> = </symbol> 
					<expression>
						<term>
							<identifier> appleCounter </identifier> 
						</term>
						<symbol> + </symbol> 
						<term>
							<integerConstant> 1 </integerConstant> 
						</term>
					</expression>
					<symbol> ; </symbol> 
				</letStatement>
				<doStatement>
					<keyword> do </keyword> 
					<identifier> Screen </identifier> 
					<symbol> . </symbol> 
					<identifier> setColor </identifier> 
					<symbol> ( </symbol> 
					<expressionList>
						<expression>
							<term>
								<keyword> false </keyword> 
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol> 
					<symbol> ; </symbol> 
				</doStatement>
				<doStatement>
					<keyword> do </keyword> 
					<identifier> Screen </identifier> 
					<symbol> . </symbol> 
					<identifier> drawCircle </identifier> 
					<symbol> ( </symbol> 
					<expressionList>
						<expression>
							<term>
								<identifier> xApple </identifier> 
							</term>
						</expression>
						<symbol> , </symbol> 
						<expression>
							<term>
								<identifier> yApple </identifier> 
							</term>
						</expression>
						<symbol> , </symbol> 
						<expression>
							<term>
								<integerConstant> 5 </integerConstant> 
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol> 
					<symbol> ; </symbol> 
				</doStatement>
				<letStatement>
					<keyword> let </keyword> 
					<identifier> score </identifier> 
					<symbol> = </symbol> 
					<expression>
						<term>
							<identifier> score </identifier> 
						</term>
						<symbol> + </symbol> 
						<term>
							<integerConstant> 10 </integerConstant> 
						</term>
					</expression>
					<symbol> ; </symbol> 
				</letStatement>
				<doStatement>
					<keyword> do </keyword> 
					<identifier> Output </identifier> 
					<symbol> . </symbol> 
					<identifier> moveCursor </identifier> 
					<symbol> ( </symbol> 
					<expressionList>
						<expression>
							<term>
								<integerConstant> 3 </integerConstant> 
							</term>
						</expression>
						<symbol> , </symbol> 
						<expression>
							<term>
								<integerConstant> 7 </integerConstant> 
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol> 
					<symbol> ; </symbol> 
				</doStatement>
				<doStatement>
					<keyword> do </keyword> 
					<identifier> Output </identifier> 
					<symbol> . </symbol> 
					<identifier> printInt </identifier> 
					<symbol> ( </symbol> 
					<expressionList>
						<expression>
							<term>
								<identifier> score </identifier> 
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol> 
					<symbol> ; </symbol> 
				</doStatement>
				<letStatement>
					<keyword> let </keyword> 
					<identifier> snakeLength </identifier> 
					<symbol> = </symbol> 
					<expression>
						<term>
							<identifier> snake </identifier> 
							<symbol> . </symbol> 
							<identifier> getLength </identifier> 
							<symbol> ( </symbol> 
							<expressionList>
							</expressionList>
							<symbol> ) </symbol> 
						</term>
						<symbol> + </symbol> 
						<term>
							<integerConstant> 100 </integerConstant> 
						</term>
					</expression>
					<symbol> ; </symbol> 
				</letStatement>
				<ifStatement>
					<keyword> if </keyword> 
					<symbol> ( </symbol> 
					<expression>
						<term>
							<identifier> snakeLength </identifier> 
						</term>
						<symbol> &lt; </symbol> 
						<term>
							<identifier> snake </identifier> 
							<symbol> . </symbol> 
							<identifier> getMaxLength </identifier> 
							<symbol> ( </symbol> 
							<expressionList>
							</expressionList>
							<symbol> ) </symbol> 
						</term>
					</expression>
					<symbol> ) </symbol> 
					<symbol> { </symbol> 
					<statements>
						<doStatement>
							<keyword> do </keyword> 
							<identifier> snake </identifier> 
							<symbol> . </symbol> 
							<identifier> setLength </identifier> 
							<symbol> ( </symbol> 
							<expressionList>
								<expression>
									<term>
										<identifier> snakeLength </identifier> 
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol> 
							<symbol> ; </symbol> 
						</doStatement>
					</statements>
					<symbol> } </symbol> 
				</ifStatement>
				<ifStatement>
					<keyword> if </keyword> 
					<symbol> ( </symbol> 
					<expression>
						<term>
							<identifier> appleCounter </identifier> 
						</term>
						<symbol> = </symbol> 
						<term>
							<integerConstant> 1 </integerConstant> 
						</term>
					</expression>
					<symbol> ) </symbol> 
					<symbol> { </symbol> 
					<statements>
						<letStatement>
							<keyword> let </keyword> 
							<identifier> xApple </identifier> 
							<symbol> = </symbol> 
							<expression>
								<term>
									<integerConstant> 120 </integerConstant> 
								</term>
							</expression>
							<symbol> ; </symbol> 
						</letStatement>
						<letStatement>
							<keyword> let </keyword> 
							<identifier> yApple </identifier> 
							<symbol> = </symbol> 
							<expression>
								<term>
									<integerConstant> 50 </integerConstant> 
								</term>
							</expression>
							<symbol> ; </symbol> 
						</letStatement>
					</statements>
					<symbol> } </symbol> 
				</ifStatement>
				<ifStatement>
					<keyword> if </keyword> 
					<symbol> ( </symbol> 
					<expression>
						<term>
							<identifier> appleCounter </identifier> 
						</term>
						<symbol> = </symbol> 
						<term>
							<integerConstant> 2 </integerConstant> 
						</term>
					</expression>
					<symbol> ) </symbol> 
					<symbol> { </symbol> 
					<statements>
						<letStatement>
							<keyword> let </keyword> 
							<identifier> xApple </identifier> 
							<symbol> = </symbol> 
							<expression>
								<term>
									<integerConstant> 150 </integerConstant> 
								</term>
							</expression>
							<symbol> ; </symbol> 
						</letStatement>
						<letStatement>
							<keyword> let </keyword> 
							<identifier> yApple </identifier> 
							<symbol> = </symbol> 
							<expression>
								<term>
									<integerConstant> 200 </integerConstant> 
								</term>
							</expression>
							<symbol> ; </symbol> 
						</letStatement>
					</statements>
					<symbol> } </symbol> 
				</ifStatement>
				<ifStatement>
					<keyword> if </keyword> 
					<symbol> ( </symbol> 
					<expression>
						<term>
							<identifier> appleCounter </identifier> 
						</term>
						<symbol> = </symbol> 
						<term>
							<integerConstant> 3 </integerConstant> 
						</term>
					</expression>
					<symbol> ) </symbol> 
					<symbol> { </symbol> 
					<statements>
						<letStatement>
							<keyword> let </keyword> 
							<identifier> xApple </identifier> 
							<symbol> = </symbol> 
							<expression>
								<term>
									<integerConstant> 300 </integerConstant> 
								</term>
							</expression>
							<symbol> ; </symbol> 
						</letStatement>
						<letStatement>
							<keyword> let </keyword> 
							<identifier> yApple </identifier> 
							<symbol> = </symbol> 
							<expression>
								<term>
									<integerConstant> 150 </integerConstant> 
								</term>
							</expression>
							<symbol> ; </symbol> 
						</letStatement>
					</statements>
					<symbol> } </symbol> 
				</ifStatement>
				<ifStatement>
					<keyword> if </keyword> 
					<symbol> ( </symbol> 
					<expression>
						<term>
							<identifier> appleCounter </identifier> 
						</term>
						<symbol> = </symbol> 
						<term>
							<integerConstant> 4 </integerConstant> 
						</term>
					</expression>
					<symbol> ) </symbol> 
					<symbol> { </symbol> 
					<statements>
						<letStatement>
							<keyword> let </keyword> 
							<identifier> xApple </identifier> 
							<symbol> = </symbol> 
							<expression>
								<term>
									<integerConstant> 250 </integerConstant> 
								</term>
							</expression>
							<symbol> ; </symbol> 
						</letStatement>
						<letStatement>
							<keyword> let </keyword> 
							<identifier> yApple </identifier> 
							<symbol> = </symbol> 
							<expression>
								<term>
									<integerConstant> 50 </integerConstant> 
								</term>
							</expression>
							<symbol> ; </symbol> 
						</letStatement>
					</statements>
					<symbol> } </symbol> 
				</ifStatement>
				<ifStatement>
					<keyword> if </keyword> 
					<symbol> ( </symbol> 
					<expression>
						<term>
							<identifier> appleCounter </identifier> 
						</term>
						<symbol> = </symbol> 
						<term>
							<integerConstant> 5 </integerConstant> 
						</term>
					</expression>
					<symbol> ) </symbol> 
					<symbol> { </symbol> 
					<statements>
						<letStatement>
							<keyword> let </keyword> 
							<identifier> xApple </identifier> 
							<symbol> = </symbol> 
							<expression>
								<term>
									<integerConstant> 400 </integerConstant> 
								</term>
							</expression>
							<symbol> ; </symbol> 
						</letStatement>
						<letStatement>
							<keyword> let </keyword> 
							<identifier> yApple </identifier> 
							<symbol> = </symbol> 
							<expression>
								<term>
									<integerConstant> 200 </integerConstant> 
								</term>
							</expression>
							<symbol> ; </symbol> 
						</letStatement>
					</statements>
					<symbol> } </symbol> 
				</ifStatement>
				<ifStatement>
					<keyword> if </keyword> 
					<symbol> ( </symbol> 
					<expression>
						<term>
							<identifier> appleCounter </identifier> 
						</term>
						<symbol> = </symbol> 
						<term>
							<integerConstant> 6 </integerConstant> 
						</term>
					</expression>
					<symbol> ) </symbol> 
					<symbol> { </symbol> 
					<statements>
						<letStatement>
							<keyword> let </keyword> 
							<identifier> xApple </identifier> 
							<symbol> = </symbol> 
							<expression>
								<term>
									<integerConstant> 200 </integerConstant> 
								</term>
							</expression>
							<symbol> ; </symbol> 
						</letStatement>
						<letStatement>
							<keyword> let </keyword> 
							<identifier> yApple </identifier> 
							<symbol> = </symbol> 
							<expression>
								<term>
									<integerConstant> 70 </integerConstant> 
								</term>
							</expression>
							<symbol> ; </symbol> 
						</letStatement>
					</statements>
					<symbol> } </symbol> 
				</ifStatement>
				<ifStatement>
					<keyword> if </keyword> 
					<symbol> ( </symbol> 
					<expression>
						<term>
							<identifier> appleCounter </identifier> 
						</term>
						<symbol> = </symbol> 
						<term>
							<integerConstant> 7 </integerConstant> 
						</term>
					</expression>
					<symbol> ) </symbol> 
					<symbol> { </symbol> 
					<statements>
						<letStatement>
							<keyword> let </keyword> 
							<identifier> xApple </identifier> 
							<symbol> = </symbol> 
							<expression>
								<term>
									<integerConstant> 450 </integerConstant> 
								</term>
							</expression>
							<symbol> ; </symbol> 
						</letStatement>
						<letStatement>
							<keyword> let </keyword> 
							<identifier> yApple </identifier> 
							<symbol> = </symbol> 
							<expression>
								<term>
									<integerConstant> 120 </integerConstant> 
								</term>
							</expression>
							<symbol> ; </symbol> 
						</letStatement>
						<letStatement>
							<keyword> let </keyword> 
							<identifier> appleCounter </identifier> 
							<symbol> = </symbol> 
							<expression>
								<term>
									<integerConstant> 0 </integerConstant> 
								</term>
							</expression>
							<symbol> ; </symbol> 
						</letStatement>
					</statements>
					<symbol> } </symbol> 
				</ifStatement>
				<doStatement>
					<keyword> do </keyword> 
					<identifier> Screen </identifier> 
					<symbol> . </symbol> 
					<identifier> setColor </identifier> 
					<symbol> ( </symbol> 
					<expressionList>
						<expression>
							<term>
								<keyword> true </keyword> 
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol> 
					<symbol> ; </symbol> 
				</doStatement>
				<doStatement>
					<keyword> do </keyword> 
					<identifier> Screen </identifier> 
					<symbol> . </symbol> 
					<identifier> drawCircle </identifier> 
					<symbol> ( </symbol> 
					<expressionList>
						<expression>
							<term>
								<identifier> xApple </identifier> 
							</term>
						</expression>
						<symbol> , </symbol> 
						<expression>
							<term>
								<identifier> yApple </identifier> 
							</term>
						</expression>
						<symbol> , </symbol> 
						<expression>
							<term>
								<integerConstant> 5 </integerConstant> 
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol> 
					<symbol> ; </symbol> 
				</doStatement>
				<returnStatement>
					<keyword> return </keyword> 
					<symbol> ; </symbol> 
				</returnStatement>
			</statements>
			<symbol> } </symbol> 
		</subroutineBody>
	</subroutineDec>
	<symbol> } </symbol> 
</class>