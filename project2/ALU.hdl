// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
   Not16(in=x,out=notx);
   Not16(in=y,out=noty);
   And16(a=x,b=notx,out=zerox); //bara nollor
   
   Mux16(a=x,b=zerox,sel=zx,out=x1); // zx
   Mux16(a=y,b=zerox,sel=zy,out=y1); //zy


   Not16(in=x1,out=notx1);
   Not16(in=y1,out=noty1);
   Mux16(a=x1,b=notx1,sel=nx,out=x2); //nx
   Mux16(a=y1,b=noty1,sel=ny,out=y2); //ny

   Add16(a=x2,b=y2,out=addxy);
   And16(a=x2,b=y2,out=andxy);
   Mux16(a=andxy, b=addxy,sel=f,out=fxy); // add eller and

   Not16(in=fxy,out=notfxy);
   Mux16(a=fxy,b=notfxy,sel=no,out=final);//när denna hette out så funkade allt
   
   Or16(a=final,b=zerox,out=out); // få ut final
   //And(a=final[0],b=final[1],out=hej);
   
   // jag förstod inte hur jag skulle kunna gå ifrån 16.bit till 1.bit
   // min första lösning är neda, men sedan skapade jag 0r16Way och Neg16
   // och då funkade allt bra
   Or16Way(in=final,out=finalor); // kollar om det finns en etta
   Not(in=finalor,out=zr);
 
   Neg16(in=final,out=ng);

   // man kan skapa egna längder via out t.ex.
   // Mux16(a=result, b=negated, sel=no, out=out, out[0..7]=out7, out[8..15]=out15, out[15]=negative);


// min första lösning men fick inte använda subbusses på annat än input
/*
 //zr jag vill trycka in final som är 16 och får ut zr och ng
   // skulle kunna göra en lång kedja av OR.
   Or(a=final[0],b=final[1],out=eight1);
   Or(a=final[2],b=final[3],out=eight2);
   Or(a=final[4],b=final[5],out=eight3);
   Or(a=final[6],b=final[7],out=eight4);
   Or(a=final[8],b=final[9],out=eight5);
   Or(a=final[10],b=final[11],out=eight6);
   Or(a=final[12],b=final[13],out=eight7);
   Or(a=final[14],b=final[15],out=eight8);
  
   Or(a=eight1,b=eight2,out=semi1);
   Or(a=eight3,b=eight4,out=semi2);
   Or(a=eight5,b=eight6,out=semi3);
   Or(a=eight7,b=eight8,out=semi4);

   Or(a=semi1,b=semi2,out=pos); //positiva tal
   Or(a=semi2,b=semi3,out=neg); // negativa tal

   Or(a=pos,b=neg,out=winner);//1 om det finns en etta.
   Not(in=winner,out=zr);
   Or(a=neg,b=false,out=no); //bara för att out no
   


*/

}