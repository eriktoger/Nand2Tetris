// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    
    field Array str;
    field int length;
    field int max;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if( maxLength > 0){
            let str = Array.new(maxLength);
            let max = maxLength;
        }
        else {
            let str = Array.new(1);
            let max = 0;
        }
        let length = 0;
        
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(str);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
       
            let str[length] = c;
            let length = length +1;
       
         // should have some type of error message here
        
        return this;
        
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if( length > 0 ){
            let str[length-1] = 0;
            let length = length -1;
        }
        else {
            // error?
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
      var boolean negative;
      var int i, value, digit;
      
      let value = 0;
        
      if( str[0] = 45){
            let negative = true;
           let i = 1;
      }
       else{
           let negative =false;
           let i = 0;
       }
        while ( (i < length) & (str[i] > 47) & (str[1] < 57) ) {
            let digit = str[i] - 48;
            let value = (value*10) + digit;
            let i = i+1;
        }
        
        if(negative){
            let value = -value;
        }
        
        return value;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int value) {
        
        var int div ,temp;
        var boolean negative, first;
        let div = 10000;
        let first = false;
        
        if(value = 0){
            do appendChar(48);
            return;
        }
        
        
        if( value < 0) {
            do appendChar(45); // add -
            let value = -value;
        }
        
        // need special for 0
        while( value > -1){
            
            let temp = value / div;
            let div = div / 10;
            let value = value - (temp*div);
            
            if(temp > 0){
                let first= true;
            }
          
            if(first){
                do appendChar(temp+48);
            }
          
            
        }
        
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
